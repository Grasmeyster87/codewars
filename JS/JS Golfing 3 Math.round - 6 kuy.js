/*
  
 JS Golfing Series 
 

Task:

Return the rounded number with no more than 11 characters.
//---------------------

Серия JS Golfing

Задача:

Вернуть округлённое число, содержащее не более 11 символов.
*/

x = a => Math.round(a);

console.log(x(4.49))
/*  test

describe('tests', function() {
    const { assert } = require('chai');

    it('sample tests', function() {
        assert.strictEqual(x(1.5), 2);
        assert.strictEqual(x(1.1), 1);
        assert.strictEqual(x(9.9), 10);
        assert.strictEqual(x(4.49), 4);
    });
});
*/

/*

Це ще одна класична задачка з code golf.


  Оригінал (20 символів):
  x=a=>Math.round(a)


  Щоб досягти довжини в 11 символів, потрібно використати побітові оператори.


  Рішення (11 символів):

   1 x=a=>a+.5|0



  Як це працює:
   1. a+.5: Спочатку до числа додається 0.5. Це стандартний трюк для округлення. Якщо дрібна частина була 0.5
      або більше, то ціла частина збільшиться на одиницю.
   2. ...|0: Побітова операція "АБО" з нулем (|0) є дуже коротким способом відкинути дрібну частину числа
      (схоже на Math.trunc()).


  Важливе зауваження:
  Цей метод коректно працює для додатних чисел та нуля. Однак він дасть неправильний результат для від'ємних
   чисел.


   * Math.round(3.7) -> 4 | 3.7+.5|0 -> 4.2|0 -> 4 (Правильно)
   * Math.round(3.2) -> 3 | 3.2+.5|0 -> 3.7|0 -> 3 (Правильно)
   * Math.round(-3.7) -> -4 | -3.7+.5|0 -> -3.2|0 -> -3 (Неправильно)

  Якщо тести, які вам потрібно пройти, не включають від'ємні числа, цей варіант підійде.


  Якщо ж потрібна повна підтримка від'ємних чисел, найкоротший варіант буде 12 символів:
  x=a=>a+.5>>0
  Оператор >> (побітовий зсув вправо) працює як Math.floor і коректно обробляє від'ємні числа, що робить
  його правильною заміною Math.round.
*/